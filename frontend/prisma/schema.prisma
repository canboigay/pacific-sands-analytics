generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model PaceReport {
  id             String   @id @default(cuid())
  reportDate     DateTime
  targetMonth    String
  roomType       String
  dayOfWeek      Int?
  dayName        String?
  occupancy      Float
  adr            Float
  revenue        Float
  roomsSold      Int
  roomsAvailable Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([reportDate, targetMonth])
  @@index([roomType])
}

model OccupancyData {
  id            String   @id @default(cuid())
  snapshotDate  DateTime
  fiscalYear    String
  date          DateTime
  dayOfWeek     String?
  roomType      String?  @default("All")
  available     Int
  sold          Int
  occupancyRate Float
  adr           Float?
  revPAR        Float?
  revenue       Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([snapshotDate, date, roomType])
  @@index([date])
  @@index([fiscalYear])
}

model RateShop {
  id           String   @id @default(cuid())
  reportDate   DateTime
  checkInDate  DateTime
  nights       Int?     @default(1)
  property     String
  roomType     String
  ourRate      Float?
  compRate     Float?
  difference   Float?
  percentDiff  Float?
  availability String?
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([reportDate, checkInDate])
  @@index([property])
}

model DataImport {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String?
  fileType    String
  fileSize    Int?
  recordCount Int
  importedAt  DateTime @default(now())
  status      String
  errors      Json?
  metadata    Json?

  @@index([fileType, status])
}

model MonthlyMetrics {
  id             String   @id @default(cuid())
  month          DateTime
  fiscalYear     String
  avgOccupancy   Float
  avgAdr         Float
  totalRevenue   Float
  totalRoomsSold Int
  totalAvailable Int
  revPAR         Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([month, fiscalYear])
}

model Item {
  id   Int    @id @default(autoincrement())
  name String
}

model GPTInteraction {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  interactionType String
  endpoint        String
  user            String?  @default("Sandy")
  requestData     Json?
  requestSummary  String?  @db.Text
  responseData    Json?
  responseSummary String?  @db.Text
  responseTime    Int?
  dataPoints      Int?
  confidence      Float?
  category        String?
  tags            String?
  businessValue   String?  @db.Text
  actionTaken     String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([timestamp])
  @@index([interactionType])
  @@index([category])
}

model GPTInsight {
  id              String    @id @default(cuid())
  generatedAt     DateTime  @default(now())
  insightType     String
  title           String
  content         String    @db.Text
  summary         String?   @db.Text
  dataSource      String?
  dateRange       String?
  confidence      Float?
  priority        String?   @default("medium")
  actionable      Boolean   @default(true)
  implemented     Boolean   @default(false)
  implementedAt   DateTime?
  outcome         String?   @db.Text
  category        String?
  tags            String?
  potentialImpact String?   @db.Text
  actualImpact    String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([generatedAt])
  @@index([insightType])
  @@index([priority])
  @@index([implemented])
}

model GPTUsageSummary {
  id                 String   @id @default(cuid())
  date               DateTime @unique
  totalQueries       Int      @default(0)
  totalResponses     Int      @default(0)
  avgResponseTime    Int?
  analyticsQueries   Int      @default(0)
  forecastQueries    Int      @default(0)
  knowledgeQueries   Int      @default(0)
  insightsStored     Int      @default(0)
  dataPointsAnalyzed Int      @default(0)
  recordsReturned    Int      @default(0)
  keyInsights        Json?
  topQueries         Json?
  businessValue      String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// RMS Dynamic Formula System Tables

model RMSFormula {
  id                 String            @id @default(cuid())
  name               String            @unique
  category           String            // pricing, occupancy, revenue, forecast
  formulaExpression  String            @db.Text // The actual formula as string
  variables          Json              // List of variables used in formula
  description        String?           @db.Text
  isActive           Boolean           @default(true)
  version            Int               @default(1)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          String?
  
  calculations       RMSCalculation[]
  formulaVersions    RMSFormulaVersion[]
  
  @@index([category])
  @@index([isActive])
}

model RMSFormulaVersion {
  id                 String      @id @default(cuid())
  formulaId          String
  formula            RMSFormula  @relation(fields: [formulaId], references: [id])
  version            Int
  formulaExpression  String      @db.Text
  variables          Json
  changedBy          String
  changeReason       String?     @db.Text
  createdAt          DateTime    @default(now())
  
  @@unique([formulaId, version])
  @@index([formulaId])
}

model RMSRule {
  id          String    @id @default(cuid())
  name        String    @unique
  ruleType    String    // trigger, threshold, modifier
  conditions  Json      // JSON structure of conditions
  actions     Json      // JSON structure of actions
  priority    Int       @default(0)
  isActive    Boolean   @default(true)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  
  executions  RMSRuleExecution[]
  
  @@index([ruleType])
  @@index([isActive])
  @@index([priority])
}

model RMSParameter {
  id            String    @id @default(cuid())
  parameterKey  String    @unique
  parameterValue Json     // Can store numbers, strings, arrays, objects
  parameterType String    // percentage, multiplier, fixed, range
  category      String
  description   String?   @db.Text
  minValue      Float?
  maxValue      Float?
  defaultValue  Json?
  updatedAt     DateTime  @updatedAt
  updatedBy     String?
  
  @@index([category])
  @@index([parameterKey])
}

model RMSCalculation {
  id             String      @id @default(cuid())
  formulaId      String
  formula        RMSFormula  @relation(fields: [formulaId], references: [id])
  inputValues    Json
  outputValue    Json
  executionTime  Float       // in milliseconds
  calculatedAt   DateTime    @default(now())
  metadata       Json?       // Additional context about the calculation
  
  @@index([formulaId])
  @@index([calculatedAt])
}

model RMSRuleExecution {
  id             String    @id @default(cuid())
  ruleId         String
  rule           RMSRule   @relation(fields: [ruleId], references: [id])
  inputData      Json
  conditionMet   Boolean
  actionsTaken   Json?
  executionTime  Float     // in milliseconds
  executedAt     DateTime  @default(now())
  metadata       Json?
  
  @@index([ruleId])
  @@index([executedAt])
}

model RMSFormulaTest {
  id             String    @id @default(cuid())
  formulaName    String
  testData       Json
  expectedResult Json
  actualResult   Json?
  passed         Boolean?
  errorMessage   String?   @db.Text
  testedAt       DateTime  @default(now())
  testedBy       String?
  
  @@index([formulaName])
  @@index([testedAt])
}